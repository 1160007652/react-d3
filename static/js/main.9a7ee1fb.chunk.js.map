{"version":3,"sources":["page/about/index.js","page/example-1-emot/index.js","App.js","serviceWorker.js","index.js"],"names":["About","react_default","a","createElement","className","EmotSVG","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","refSvgDom","React","createRef","emotStyle","emotWidth","emotHeight","svg","select","current","draw","_this$emotStyle","emotContiner","append","attr","concat","transition","duration","arc","innerRadius","outerRadius","startAngle","Math","PI","endAngle","_this$emotStyle2","ref","width","height","Component","App","id","BrowserRouter","Fragment","NavLink","exact","to","activeClassName","Switch","Route","path","component","EmotSvg","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9a7ee1fb.chunk.js","sourcesContent":["import React from 'react';\nimport './index.css';\n\nconst About = ()=>{\n    return(\n        <div className=\"about\" >\n            <div className=\"info\">\n                <h2>D3 - example</h2>\n                <p>author: Muniz</p>\n            </div>\n        </div>\n    );\n};\n\nexport default About;","import React from 'react';\nimport { select, arc} from 'd3';\nimport './index.css';\n\nclass EmotSVG extends React.Component {\n    constructor(props) {\n        super(props);\n        this.refSvgDom = React.createRef();\n        this.emotStyle = {\n            emotWidth: 900,\n            emotHeight: 500\n        }\n    }\n    componentDidMount() {\n        this.svg = select(this.refSvgDom.current);\n        this.draw();\n    }\n    draw () {\n        const { emotWidth, emotHeight } = this.emotStyle;\n        const emotContiner = this.svg.append('g')\n            .attr('transfrom', `translate(${emotWidth / 2}, ${emotHeight / 2})`);\n\n        emotContiner.append('circle')\n            .attr('r', 160)\n            .attr('cx', emotWidth / 2).attr('cy', emotHeight / 2)\n            .attr('fill', 'yellow')\n            .attr('stroke', 'black');\n\n        emotContiner.append('circle').attr('r', 30)\n            .attr('cx', emotWidth / 2 - 70)\n            .attr('cy', emotHeight / 2.5)\n            .attr('fill', 'black');\n\n        emotContiner.append('circle').attr('r', 30).attr('cx', emotWidth / 2 + 70).attr('cy', emotHeight / 2.5)\n            .attr('fill', 'black');\n\n        emotContiner.append('circle').attr('r', 10).attr('cx', emotWidth / 2 - 70).attr('cy', emotHeight / 2.5 + 4)\n            .attr('fill', 'white');\n\n        emotContiner.append('circle').attr('r', 10).attr('cx', emotWidth / 2 + 70).attr('cy', emotHeight / 2.5 + 4)\n            .attr('fill', 'white');\n\n        emotContiner.append('rect').attr('x',emotWidth / 2 - 110).attr('y',emotHeight / 3.3).attr('width', '80').attr('height', '10').attr('fill', 'black')\n            .attr('class', 'eyebrow')\n            .transition().duration(2000).attr('y', emotHeight / 3.3 - 10);\n        emotContiner.append('rect').attr('x',emotWidth / 2 + 30).attr('y',emotHeight / 3.3).attr('width', '80').attr('height', '10').attr('fill', 'black')\n            .attr('class', 'eyebrow')    \n            .transition().duration(2000).attr('y', emotHeight / 3.3 - 10);\n        \n        const mouth = emotContiner.append('g').attr('transform', `translate(${emotWidth / 2}, ${emotHeight / 2})`);\n        mouth.append('path').attr('d', arc()({\n          innerRadius: 100,\n          outerRadius: 114,\n          startAngle: Math.PI / 2,\n          endAngle: Math.PI * 3 / 2\n        }));\n    }\n    render() {\n        const { emotWidth, emotHeight } = this.emotStyle;\n        return (\n            <div className=\"example-emot\">\n                <svg  ref={this.refSvgDom} width={emotWidth} height={emotHeight} ></svg>\n            </div>\n        );\n    }\n}\n\nexport default EmotSVG;","import React from 'react';\nimport { BrowserRouter, Switch, Route, NavLink} from 'react-router-dom';\nimport About from './page/about';\nimport EmotSvg from './page/example-1-emot';\nimport './App.css';\n\nclass App extends React.Component {\n    \n    render() {\n        return (\n            <div id=\"d3-learn\">\n                <BrowserRouter>\n                    <React.Fragment>\n                        <div id=\"menu\">\n                            <NavLink exact to=\"/\" className=\"menu-item\" activeClassName=\"active-menu\" >首页</NavLink>\n                            <NavLink to=\"/emot\" className=\"menu-item\" activeClassName=\"active-menu\" >大黄人</NavLink>\n                            <NavLink to=\"/histogram\" className=\"menu-item\" activeClassName=\"active-menu\" >柱状图</NavLink>\n                        </div>\n                        <div id=\"page-content\">\n                            <Switch>\n                                <Route exact path=\"/\" component={About}/>\n                                <Route exact path=\"/emot\" component={EmotSvg}/>\n                            </Switch>\n                        </div>\n                    </React.Fragment>\n                </BrowserRouter>\n            </div>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}